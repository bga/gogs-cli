#!/bin/bash


# config ----------

token_filename=gogs-api-token.txt
server="https://try.gogs.io" # replaced by environment variable GOGS_SERVER_URL if set


# utils ----------

if [ -n "$GOGS_SERVER_URL" ]; then
	server="$GOGS_SERVER_URL"
fi

debug=0
while [ -n "$1" ] && [[ "$1" == "-"* ]] && [ "$1" != "--" ]; do
	case "$1" in
		-d) debug=1; echo DRY RUN: doing nothing ;;
	esac
	shift
done

function get-gogs-api-token {
	if [ -f "$token_filename" ]; then
		gogs_token=$(cat "$token_filename")
	elif [ -f "$token_filename.gpg" ]; then
		gogs_token=$(gpg -q -d "$token_filename.gpg")
	else
		echo No Gogs API token found \($token_filename\[.gpg\]\).
		echo Your can create one here: $server/user/settings/applications
		read -sp "Token: " gogs_token
	fi
}

function gogs-curl {
	method=$1
	cmd=$2
	data="$3"
	auth="?token=$gogs_token"
	address=$server"/api/v1"$cmd$auth

	if [ $debug -eq 1 ]; then
		echo $method
		echo -e "\tcommand: $cmd"
		echo -e "\taddress: $address"
		echo -e "\tdata:    $data"
	else
		echo
		sleep 1s
		if [ -n "$data" ]; then
			curl -d "$data" -H "Content-Type: application/json" -X $method "$address" --insecure 2> /dev/null
		else
			curl -X $method "$address" --insecure 2> /dev/null
		fi
	fi
}

function syntax-help {
	if [ $1 -gt $(( $# - 2 )) ]; then
		echo Required argument\(s\): $2
			exit 0
			fi
}

function split-json {
	if [ $# -gt 2 ]; then
		echo "$3"
	else
		cat
	fi | sed "s/$1$2/$1\n$2/g"
}

function json-property {
	if [ $# -gt 1 ]; then
		echo "$2"
	else
		cat
	fi | sed -nE "s/^.*\"$1\":(\
(true)|\
(false)|\
([0-9]+)|\
\"([^\"]+)\"|\
(\{[^}]+\})|\
(\[[^]]+\])\
).*$/\2\3\4\5\6\7/p"
}


# actions ----------

actions=$actions" create-org-repo"
function create-org-repo {
	syntax-help 4 "org-name repo-name description private:true/false" "$@"
	gogs-curl POST /org/$1/repos "{\"name\":\"$2\",\"description\":\"$3\",\"private\":$4}"
}

actions=$actions" create-user-repo"
function create-user-repo {
	syntax-help 4 "user-name repo-name description private:true/false" "$@"
	gogs-curl POST /admin/users/$1/repos "{\"name\":\"$2\",\"description\":\"$3\",\"private\":$4}"
}

actions=$actions" delete-repo"
function delete-repo {
	syntax-help 2 "user/org-name repo-name" "$@"
	gogs-curl DELETE /repos/$1/$2
}

actions=$actions" list-org-repos"
function list-org-repos {
	syntax-help 1 "org-name" "$@"
	gogs-curl GET /orgs/$1/repos | split-json "}}," "{" | json-property name
}

actions=$actions" list-user-repos"
function list-user-repos {
	syntax-help 1 "user-name" "$@"
	gogs-curl GET /users/$1/repos | split-json "}}," "{" | json-property name
}

actions=$actions" -"

actions=$actions" get-repo"
function get-repo {
	syntax-help 2 "user/org-name repo-name [property]" "$@"
	json="$(gogs-curl GET /repos/$1/$2)"
	if [ -z $3 ]; then
		echo "$json"
	else
		echo "$json" | json-property "$3"
	fi
}

actions=$actions" enable-issues"
function enable-issues {
	syntax-help 3 "user/org-name repo-name enable:true/false" "$@"
	gogs-curl PATCH /repos/$1/$2/issue-tracker "{\"enable_issues\":$3}"
}

actions=$actions" -"

actions=$actions" create-team"
function create-team {
	syntax-help 3 "org-name team-name description [permission: read/write/admin]" "$@"
	gogs-curl POST /admin/orgs/$1/teams "{\"name\":\"$2\",\"description\":\"$3\",\"permission\":\"$4\"}"
}

actions=$actions" list-teams"
function list-teams {
	syntax-help 1 "org-name" "$@"
	gogs-curl GET /orgs/$1/teams | split-json "}," "{" | json-property name
}

actions=$actions" get-team-id"
function get-team-id {
	syntax-help 2 "org-name team-name" "$@"
	echo -n $(gogs-curl GET /orgs/$1/teams | split-json "}," "{" | grep "\"name\":\"$2\"" | json-property id)
}

actions=$actions" -"

actions=$actions" add-collaborator"
function add-collaborator {
	syntax-help 3 "user/org-name repo-name user-name [permission: read/write/admin]" "$@"
	gogs-curl PUT /repos/$1/$2/collaborators/$3 "{\"permission\":\"$4\"}"
}

actions=$actions" remove-collaborator"
function remove-collaborator {
	syntax-help 3 "user/org-name repo-name user-name" "$@"
	gogs-curl DELETE /repos/$1/$2/collaborators/$3
}

actions=$actions" list-collaborators"
function list-collaborators {
	syntax-help 2 "user/org-name repo-name" "$@"
	gogs-curl GET /repos/$1/$2/collaborators | split-json "}," "{" | json-property username
}

actions=$actions" -"

actions=$actions" add-team-member"
function add-team-member {
	syntax-help 2 "team-id user-name" "$@"
	gogs-curl PUT /admin/teams/$1/members/$2
}

actions=$actions" remove-team-member"
function remove-team-member {
	syntax-help 2 "team-id user-name" "$@"
	gogs-curl DELETE /admin/teams/$1/members/$2
}

actions=$actions" list-team-members"
function list-team-members {
	syntax-help 1 "team-id" "$@"
	gogs-curl GET /admin/teams/$1/members | split-json "}," "{" | json-property username
}

actions=$actions" -"

actions=$actions" add-team-repo"
function add-team-repo {
	syntax-help 2 "team-id repo-name" "$@"
	gogs-curl PUT /admin/teams/$1/repos/$2
}

actions=$actions" remove-team-repo"
function remove-team-repo {
	syntax-help 2 "team-id repo-name" "$@"
	gogs-curl DELETE /admin/teams/$1/repos/$2
}

actions=$actions" -"

actions=$actions" get-commit"
function get-commit {
	syntax-help 3 "user/org-name repo-name branch/tag/sha [property]" "$@"
	json="$(gogs-curl GET /repos/$1/$2/commits/$3)"
	if [ -z $4 ]; then
		echo "$json"
	else
		echo "$json" | json-property "$4"
	fi
}

actions=$actions" get-raw"
function get-raw {
	syntax-help 3 "user/org-name repo-name ref" "$@"
	gogs-curl GET /repos/$1/$2/raw/$3
}


# cmd interface ----------

function print-help {
	echo \*\* Gogs command line util \*\*
	echo
	for action in $actions; do
		if [ "$action" == "-" ]; then
			echo
		else
			echo "  "$action
		fi
	done
}

if [ $# -gt 0 ]; then
	action=$1
	shift
	for a in $actions; do
		if [ "$a" == "$action" ] && [ "$a" != "-" ]; then
			get-gogs-api-token
			$action "$@"
			exit 0
		fi
	done
	case $action in
		--help) print-help ;;
		--) action=$1; shift; get-gogs-api-token; $action "$@" ;;
		*) echo Unrecognized action: \"$action\" ;;
	esac
else
	print-help
fi
