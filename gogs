#!/bin/bash


# config ----------

gogs_token=""
gogs_token_envvar=GOGS_API_TOKEN
gogs_token_filename=gogs-api-token.txt

gogs_server="" # https://try.gogs.io
gogs_server_envvar=GOGS_SERVER_URL
gogs_server_filename=gogs-server-url.txt

# utils ----------

shopt -s expand_aliases

function configure {
	# server url
	if [ -n "$(printenv $gogs_server_envvar)" ]; then
		gogs_server=$(printenv $gogs_server_envvar)
	elif [ -f "$gogs_server_filename" ]; then
		gogs_server=$(cat "$gogs_server_filename")
	elif [ $# -eq 0 ]; then
		echo No Gogs server URL \(e.g. https://try.gogs.io\) configured.
		read -p "URL: " gogs_server
		echo
		if [ -z "$gogs_server" ]; then exit 0; fi
	fi

	# api token
	if [ -n "$(printenv $gogs_token_envvar)" ]; then
		gogs_token=$(printenv $gogs_token_envvar)
	elif [ -f "$gogs_token_filename" ]; then
		gogs_token=$(cat "$gogs_token_filename")
	elif [ -f "$gogs_token_filename.gpg" ]; then
		gogs_token=$(gpg -q -d "$gogs_token_filename.gpg")
	elif [ $# -eq 0 ]; then
		echo No Gogs API token configured.
		read -sp "Token: " gogs_token
		echo
		echo
		if [ -z "$gogs_token" ]; then exit 0; fi
	fi
}

function run_curl_and_log {
	if [ $dev -eq 1 ]; then
		echo "$@" > log_curl_cmd.txt
		output=`"$@" 2> log_error.txt`
		echo "$output" > log_curl_response.txt
		echo -n "$output"
	else
		"$@" 2> /dev/null
	fi
}

function gogs-curl {
	method=$1
	cmd=$2
	data="$3"
	auth="?token=$gogs_token"
	address=$gogs_server"/api/v1"$cmd$auth

	if [ $debug -eq 1 ]; then
		echo $method
		echo -e "\tcommand: $cmd"
		echo -e "\taddress: $address"
		echo -e "\tdata:    $data"
	else
		echo
		sleep 1s
		if [ -n "$data" ]; then
			run_curl_and_log curl -d "$data" -H "Content-Type: application/json" -X $method "$address" --insecure
		else
			run_curl_and_log curl -X $method "$address" --insecure
		fi
	fi
}

function gogs-curl_basic {
	method=$1
	auth=$2
	cmd=$3
	data="$4"
	address=$gogs_server"/api/v1"$cmd

	if [ $debug -eq 1 ]; then
		echo $method
		echo -e "\tauth: $auth"
		echo -e "\taddress: $address"
		echo -e "\tdata:    $data"
	else
		echo
		sleep 1s
		if [ -n "$data" ]; then
			run_curl_and_log curl -u $auth -d "$data" -H "Content-Type: application/json" -X $method "$address" --insecure
		else
			run_curl_and_log curl -u $auth -X $method "$address" --insecure
		fi
	fi
}

function syntax-help {
	if [ $1 -gt $(( $# - 2 )) ] || [ "$3" = "--help" ]; then
		if [ -z "$2" ]; then
			echo Syntax: \(no arguments\)
		else
			echo Syntax: $2
		fi
		exit 1
	fi
}

function split-json {
	if [ $# -gt 2 ]; then
		echo "$3"
	else
		cat
	fi | sed "s/$1$2/$1\n$2/g"
}

function json-property {
	if [ $# -gt 1 ]; then
		echo "$2"
	else
		cat
	fi | sed "0,/\"$1\"/{s/\"$1\"/@@@/}" | sed -nE "s/^.*@@@:(\
(true)|\
(false)|\
([0-9]+)|\
\"([^\"]*)\"|\
(\[[^]]*\])|\
(\
\{[^{}]*(\
\{[^{}]*(\
\{[^{}]*\}[^{}]*\
)*\}[^{}]*\
)*\}\
)\
).*$/\2\3\4\5\6\7/p"
}

function per-line {
	cat | while IFS='' read -r line; do
		echo $line | $1
	done
}

function is-dev {
	if [ $dev -gt 0 ]; then
		return 0
	fi
	return 1
}

# sanity checks ----------

function check-org-exists {
	get-org $1 > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo Organization \`$1\` already exists
		return 1
	fi
	return 0
}
function check-org-exists-not {
	response=`get-org $1`
	if [ $? -ne 0 ]; then
		echo "$response"
		return 1
	fi
	return 0
}

function check-user-exists {
	get-user $1 > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo User \`$1\` already exists
		return 1
	fi
	return 0
}
function check-user-exists-not {
	response=`get-user $1`
	if [ $? -ne 0 ]; then
		echo "$response"
		return 1
	fi
	return 0
}

function check-user-org-exists {
	get-user $1 > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo User/Organization \`$1\` already exists
		return 1
	fi
	return 0
}
function check-user-org-exists-not {
	get-user $1 > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo User/Organization \`$1\` does NOT exist
		return 1
	fi
	return 0
}

function check-repo-exists {
	get-repo $1 $2 > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo Repository \`$1/$2\` already exists
		return 1
	fi
	return 0
}
function check-repo-exists-not {
	response=`get-repo $1 $2`
	if [ $? -ne 0 ]; then
		echo "$response"
		return 1
	fi
	return 0
}

function check-team-exists {
	get-team $1 $2 > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo Team \`$1:$2\` already exists
		return 1
	fi
	return 0
}
function check-team-exists-not {
	response=`get-team $1 $2`
	if [ $? -ne 0 ]; then
		echo "$response"
		return 1
	fi
	return 0
}

function check-empty {
	if [ -z "$1" ]; then
		return 1
	fi
	return 0
}
function echo-and-exit-code--error-if-empty {
	if [ ! -z "$1" ]; then
		echo "$1"
	fi
	check-empty "$1"
}

function check-message {
	test=`echo "$1" | json-property message`
	if [ -z "$test" ]; then
		return 0
	fi
	return 1
}
function echo-and-exit-code--error-if-message {
	if [ ! -z "$1" ]; then
		echo "$1"
	fi
	check-message "$1"
}

alias return-if-error='
	if [ $? -ne 0 ]; then
		return 0
	fi
	'
alias return-exit-code-if-error='
	check_error=$?
	if [ $check_error -ne 0 ]; then
		return $check_error
	fi
	'

# specialized helpers ----------

function resolve-team-id-and-following-name {
	if [ -z $3 ]; then
		if is-not-number $1; then
			echo "The provided \`team-id\` is not a number"
			return 1
		fi

		id=$1
		name=$2
	else
		check-org-exists-not $1; return-exit-code-if-error

		response=`get-team $1 $2 id`

		id=$response
		name=$3
	fi
	return 0
}

# actions ----------

actions=$actions" get-org"
function get-org {
	syntax-help 1 "org-name [property]" "$@"

	response=`gogs-curl GET /orgs/$1`

	if [ -z "$response" ]; then
		echo Organization \`$1\` does NOT exist
		return 1
	elif [ -z $2 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | json-property "$2"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" (admin) create-org"
function create-org {
	syntax-help 2 "org-name owner-user-name" "$@"

	check-org-exists $1; return-if-error
	check-user-exists-not $2; return-exit-code-if-error

	output=`gogs-curl POST /admin/users/$2/orgs "{\"username\":\"$1\"}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" create-org-repo"
function create-org-repo {
	syntax-help 4 "org-name repo-name description private:true/false" "$@"

	check-org-exists-not $1; return-exit-code-if-error
	check-repo-exists $1 $2; return-if-error

	output=`gogs-curl POST /org/$1/repos "{\"name\":\"$2\",\"description\":\"$3\",\"private\":$4}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" (admin) create-repo"
function create-repo {
	syntax-help 4 "user/org-name repo-name description private:true/false" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists $1 $2; return-if-error

	output=`gogs-curl POST /admin/users/$1/repos "{\"name\":\"$2\",\"description\":\"$3\",\"private\":$4}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" delete-repo"
function delete-repo {
	syntax-help 2 "user/org-name repo-name" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-if-error

	output=`gogs-curl DELETE /repos/$1/$2`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" list-org-repos"
function list-org-repos {
	syntax-help 1 "org-name" "$@"

	check-org-exists-not $1; return-exit-code-if-error

	response=`gogs-curl GET /orgs/$1/repos`

	if is-dev; then
		echo "$response"
	else
		echo "$response" | split-json "}}," "{" | per-line "json-property name"
	fi
}

actions=$actions" list-user-repos"
function list-user-repos {
	syntax-help 1 "user-name" "$@"

	check-user-exists-not $1; return-exit-code-if-error

	response=`gogs-curl GET /users/$1/repos`

	if is-dev; then
		echo "$response"
	else
		echo "$response" | split-json "}}," "{" | per-line "json-property name"
	fi
}

actions=$actions" -"

actions=$actions" get-repo"
function get-repo {
	syntax-help 2 "user/org-name repo-name [property]" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error

	response=`gogs-curl GET /repos/$1/$2`

	if [ -z "$response" ]; then
		echo Repository \`$1/$2\` does NOT exist
		return 1
	elif [ -z $3 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | json-property "$3"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" enable-issues"
function enable-issues {
	syntax-help 3 "user/org-name repo-name enable:true/false" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-exit-code-if-error

	output=`gogs-curl PATCH /repos/$1/$2/issue-tracker "{\"enable_issues\":$3}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" -"

actions=$actions" (admin) create-team"
function create-team {
	syntax-help 3 "org-name team-name description [permission:read/write/admin]" "$@"

	check-org-exists-not $1; return-exit-code-if-error
	check-team-exists $1 $2; return-if-error

	output=`gogs-curl POST /admin/orgs/$1/teams "{\"name\":\"$2\",\"description\":\"$3\",\"permission\":\"$4\"}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" list-teams"
function list-teams {
	syntax-help 1 "org-name" "$@"

	get-teams $1 name
}

actions=$actions" get-teams"
function get-teams {
	syntax-help 1 "org-name [property]" "$@"

	check-org-exists-not $1; return-exit-code-if-error

	response=`gogs-curl GET /orgs/$1/teams`

	if [ -z $2 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | split-json "}," "{" | per-line "json-property $2"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" get-team"
function get-team {
	syntax-help 2 "org-name team-name [property]" "$@"

	response=`get-teams $1`

	response=`echo "$response" | split-json "}," "{" | grep "\"name\":\"$2\""`

	if [ -z "$response" ]; then
		echo Team \`$1:$2\` does NOT exist
		return 1
	elif [ -z $3 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | json-property $3`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" -"

actions=$actions" add-collaborator"
function add-collaborator {
	syntax-help 3 "user/org-name repo-name user-name [permission:read/write/admin]" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-exit-code-if-error
	check-user-exists-not $3; return-exit-code-if-error

	output=`gogs-curl PUT /repos/$1/$2/collaborators/$3 "{\"permission\":\"$4\"}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" remove-collaborator"
function remove-collaborator {
	syntax-help 3 "user/org-name repo-name user-name" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-exit-code-if-error
	check-user-exists-not $3; return-if-error

	output=`gogs-curl DELETE /repos/$1/$2/collaborators/$3`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" list-collaborators"
function list-collaborators {
	syntax-help 2 "user/org-name repo-name" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-exit-code-if-error

	response=`gogs-curl GET /repos/$1/$2/collaborators`

	if is-dev; then
		echo "$response"
	else
		echo "$response" | split-json "}," "{" | per-line "json-property username"
	fi
}

actions=$actions" -"

actions=$actions" (admin) add-team-member"
function add-team-member {
	syntax-help 2 "(org-name team-name | team-id) user-name" "$@"

	resolve-team-id-and-following-name "$@"; return-exit-code-if-error

	check-user-exists-not $name; return-exit-code-if-error

	output=`gogs-curl PUT /admin/teams/$id/members/$name`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" (admin) remove-team-member"
function remove-team-member {
	syntax-help 2 "(org-name team-name | team-id) user-name" "$@"

	resolve-team-id-and-following-name "$@"; return-exit-code-if-error

	output=`gogs-curl DELETE /admin/teams/$id/members/$name`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" list-team-members"
function list-team-members {
	syntax-help 1 "team-id" "$@"
	json=$(gogs-curl GET /admin/teams/$1/members)
	if [ $debug -eq 1 ]; then
		test=`echo "$json"`
	else
		test=`echo "$json" | split-json "}," "{" | per-line "json-property username"`
	fi

	if [[ -z $test ]]; then
		exit_code=1
	else
		exit_code=0
	fi

	echo $test
	return $exit_code
}

actions=$actions" -"

actions=$actions" add-team-repo"
function add-team-repo {
	syntax-help 2 "team-id repo-name" "$@"
	gogs-curl PUT /admin/teams/$1/repos/$2
}

actions=$actions" remove-team-repo"
function remove-team-repo {
	syntax-help 2 "team-id repo-name" "$@"
	gogs-curl DELETE /admin/teams/$1/repos/$2
}

actions=$actions" get-user"
function get-user {
	syntax-help 1 "user-name property" "$@"
	json=$(gogs-curl GET /users/$1)
	if [ $debug -eq 1 ] || [ -z $2 ]; then
		test=`echo "$json"`
	else
		test=`echo "$json" | json-property "$2"`
	fi

	if [[ -z $test ]]; then
		exit_code=1
	else
		exit_code=0
	fi

	echo $test
	return $exit_code
}

actions=$actions" create-user"
function create-user {
	syntax-help 3 "user-name email password" "$@"

	get-user $1 > /dev/null 2>&1

	if [[ $? -eq 0 ]]; then
		message="user $1 already exist"
		exit_code=0
	elif [[ $? -eq 1 ]]; then
		output=`gogs-curl POST /admin/users "{\"username\": \"$1\", \"email\": \"$2\", \"password\":\"$3\"}"`
		error=`echo "$output" | json-property "message"`
		if [[ -z $error ]]; then
			message=$output
			exit_code=0
		else
			message="ERROR: $error"
			exit_code=1
		fi
	else
		message="ERROR: Cannot retrieve org"
		exit_code=2
	fi

	echo $message
	exit $exit_code
}

actions=$actions" create-user-token"
function create-user-token {
	syntax-help 3 "user-name password token-name" "$@"

	get-user $1 > /dev/null 2>&1

	if [[ $? -eq 0 ]]; then
		output=`gogs-curl_basic POST "$1:$2" /users/$1/tokens "{\"name\":\"$3\"}"`
		error=`echo "$output" | json-property "message"`

		if [[ -z $error ]]; then
			message=$output
			exit_code=0
		else
			message="ERROR: $error"
			exit_code=1
		fi
	else
		message="Error: Cannot retrieve user"
		exit_code=2
	fi

	echo $message
	exit $exit_code
}

actions=$actions" create-mirror"
function create-mirror {
	syntax-help 5 "clone-address repo-name uid private mirror [optionnal: user password]" "$@"
	if [ -z "$6" ]; then
		output=`gogs-curl POST /repos/migrate "{\"clone_addr\": \"$1\", \"repo_name\": \"$2\", \"uid\": $3, \"private\": $4, \"mirror\": $5}"`
	else
		output=`gogs-curl POST /repos/migrate "{\"clone_addr\": \"$1\", \"repo_name\": \"$2\", \"uid\": $3, \"private\": $4, \"mirror\": $5, \"auth_username\":\"$6\", \"auth_password\":\"$7\"}"`
	fi

	error=`echo "$output" | json-property "message"`

	if [[ -z $error ]]; then
		message=$output
		exit_code=0
	else
		message="ERROR: $error"
		exit_code=1
	fi

	echo $message
	exit $exit_code
}

actions=$actions" -"

actions=$actions" get-commit"
function get-commit {
	syntax-help 3 "user/org-name repo-name branch/tag/sha [property]" "$@"
	json="$(gogs-curl GET /repos/$1/$2/commits/$3)"
	if [ $debug -eq 1 ]; then
		echo "$json"
	else
		if [ -z $4 ]; then
			echo "$json"
		else
			echo "$json" | json-property "$4"
		fi
	fi
}

actions=$actions" get-raw"
function get-raw {
	syntax-help 3 "user/org-name repo-name ref" "$@"
	gogs-curl GET /repos/$1/$2/raw/$3
}


# cmd interface ----------

function print-help {
	echo
	echo \*\* Gogs command line interface \*\*
	echo
	echo "  "----------
	echo
	for action in $actions; do
		if [ "$action" = "-" ]; then
			echo
		else
			echo "  "$action
		fi
	done
	configure do-not-ask-if-not-configured
	echo
	echo "  "----------
	echo
	echo "  "Current configuration:
	echo
	echo -e "  "Server: $(if [ -z "$gogs_server" ]; then echo "\033[0;31m"NOT-CONFIGURED"\033[0m"; fi)$gogs_server
	echo "  "\(Change via environment variable $gogs_server_envvar or $gogs_server_filename\)
	echo
	echo -e "  "API token: $(if [ -z "$gogs_token" ]; then echo "\033[0;31m"NOT-CONFIGURED"\033[0m"; else echo ${gogs_token:0:5}...; fi)
	echo "  "\(Change via environment variable $gogs_token_envvar or $gogs_token_filename[.gpg]\)
	echo "  "\(Create one here: $(if [ -z "$gogs_server" ]; then echo https://YOUR.GOGS.SERVER; fi)$gogs_server/user/settings/applications\)
	echo
}

debug=0
dev=0
while [ -n "$1" ] && [[ "$1" = "-"* ]] && [ "$1" != "--" ]; do
	case "$1" in
		-d) debug=1; echo \# DRY RUN \(doing nothing\) ;;
		-D) dev=1; echo \# DEV RUN ;;
	esac
	shift
done

function run_action {
	action=$1
	if [ $dev -eq 1 ]; then
		echo \# action: $action
	fi
	configure
	if [ $dev -eq 1 ]; then
		echo \# configured \| URL: $gogs_server \| Token: $gogs_token
	fi
	"$@"
}

if [ $# -gt 0 ]; then
	action=$1
	shift
	for a in $actions; do
		if [ "$a" = "$action" ] && [ "$a" != "-" ]; then
			run_action $action "$@"
			exit $?
		fi
	done
	case $action in
		--help) print-help ;;
		--)
			action=$1
			shift
			run_action $action "$@"
			;;
		*) echo Unrecognized action: \`$action\` ;;
	esac
else
	print-help
fi
