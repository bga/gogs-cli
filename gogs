#!/bin/bash


# config ----------

gogs_token=""
gogs_token_envvar=GOGS_API_TOKEN
gogs_token_filename=gogs-api-token.txt

gogs_server="" # https://try.gogs.io
gogs_server_envvar=GOGS_SERVER_URL
gogs_server_filename=gogs-server-url.txt

# utils ----------

shopt -s expand_aliases

function configure {
	# server url
	if [ -n "$(printenv $gogs_server_envvar)" ]; then
		gogs_server=$(printenv $gogs_server_envvar)
	elif [ -f "$gogs_server_filename" ]; then
		gogs_server=$(cat "$gogs_server_filename")
	elif [ $# -eq 0 ]; then
		echo No Gogs server URL \(e.g. https://try.gogs.io\) configured.
		read -p "URL: " gogs_server
		echo
		if [ -z "$gogs_server" ]; then exit 0; fi
	fi

	# api token
	if [ -n "$(printenv $gogs_token_envvar)" ]; then
		gogs_token=$(printenv $gogs_token_envvar)
	elif [ -f "$gogs_token_filename" ]; then
		gogs_token=$(cat "$gogs_token_filename")
	elif [ -f "$gogs_token_filename.gpg" ]; then
		gogs_token=$(gpg -q -d "$gogs_token_filename.gpg" 2>/dev/null)
	elif [ $# -eq 0 ]; then
		echo No Gogs API token configured.
		read -sp "Token: " gogs_token
		echo
		echo
		if [ -z "$gogs_token" ]; then exit 0; fi
	fi
}

function run_curl_and_log {
	if is-dev; then
		echo "$@" > log_curl_cmd.txt
		output=`"$@" 2> log_error.txt`
		echo "$output" > log_curl_response.txt
		echo -n "$output"
	else
		"$@" 2> /dev/null
	fi
}

function gogs-curl {
	method=$1
	auth="?token=$gogs_token"
	cmd=$2
	data="$3"
	address=$gogs_server"/api/v1"$cmd$auth

	if [ $debug -eq 1 ] || is-dev; then
		echo \#
		echo -e "# Method:  $method"
		echo -e "# Command: $cmd"
		echo -e "# Address: $address"
		echo -e "# Data:    $data"
	fi
	if [ $debug -eq 0 ]; then
		echo
		sleep 1s
		if [ -n "$data" ]; then
			run_curl_and_log curl -d "$data" -H "Content-Type: application/json" -X $method "$address" --insecure
		else
			run_curl_and_log curl -X $method "$address" --insecure
		fi
	fi
}

function gogs-curl-basic {
	method=$1
	auth=$2
	cmd=$3
	data="$4"
	address=$gogs_server"/api/v1"$cmd

	if [ $debug -eq 1 ] || is-dev; then
		echo \#
		echo -e "# Method:  $method"
		echo -e "# Auth:    $auth"
		echo -e "# Command: $cmd"
		echo -e "# Address: $address"
		echo -e "# Data:    $data"
	fi
	if [ $debug -eq 0 ]; then
		echo
		sleep 1s
		if [ -n "$data" ]; then
			run_curl_and_log curl -u $auth -d "$data" -H "Content-Type: application/json" -X $method "$address" --insecure
		else
			run_curl_and_log curl -u $auth -X $method "$address" --insecure
		fi
	fi
}

function syntax-help {
	if [ $1 -gt $(( $# - 2 )) ] || [ "$3" = "--help" ]; then
		if [ -z "$2" ]; then
			echo Syntax: \(no arguments\)
		else
			echo Syntax: $2
		fi
		exit 1
	fi
}

function split-json {
	if [ $# -gt 2 ]; then
		echo "$3"
	else
		cat
	fi | sed "s/$1$2/$1\n$2/g"
}

function json-property {
	if [ $# -gt 1 ]; then
		echo "$2"
	else
		cat
	fi | sed "0,/\"$1\"/{s/\"$1\"/@@@/}" | sed -nE "s/^.*@@@:(\
(true)|\
(false)|\
([0-9]+)|\
\"([^\"]*)\"|\
(\[[^]]*\])|\
(\
\{[^{}]*(\
\{[^{}]*(\
\{[^{}]*\}[^{}]*\
)*\}[^{}]*\
)*\}\
)\
).*$/\2\3\4\5\6\7/p"
}

function json-properties {
	json="`</dev/stdin`"
	for i in $(seq 1 $#); do
		echo -n "$json" | json-property ${!i}
		echo -n " "
	done
	echo
}

function per-line {
	cat | while IFS='' read -r line; do
		echo $line | $1
	done
}

function is-number {
	case $1 in
		''|*[!0-9]*) return 1;;
	esac;
}
function is-not-number {
	case $1 in
		''|*[!0-9]*) return 0;;
	esac;
	return 1
}

function sub-cmd {
	if is-dev; then
		echo "#         \_ $1"
	fi
}
function sub-cmd-no-debug {
	sub-cmd "$@"
	if [ $dev -gt 0 ]; then
		((dev++))
	fi
}
alias sub-cmd-error-check='
	echo-if-error "$response"; return-exit-code-if-error
	if [ $dev -gt 0 ]; then
		((dev--))
	fi
	'
alias sub-cmd-cleanup='
	if [ $dev -gt 0 ]; then
		((dev--))
	fi
	'

alias sub-cmd-skip-if-debug='
	if [ $debug -eq 1 ]; then
		((dev--))
		return 0
	fi
	'
function is-dev {
	if [ $dev -eq 1 ]; then
		return 0
	fi
	return 1
}

# sanity checks ----------

function check-entity {
	local not=$1
	local entity=$2
	local check=$3
	local desc=$4
	shift; shift; shift; shift
	sub-cmd-no-debug "get-$entity (check-$check-exists`if $not; then echo -not; fi`)"
	sub-cmd-skip-if-debug
	`echo get-$entity` "$@" > /dev/null 2>&1
	error_code=$?
	sub-cmd-cleanup
	if ! $not && [ $error_code -eq 0 ]; then
		echo $desc already exists
		return 1
	elif $not && [ $error_code -ne 0 ]; then
		echo $desc does NOT exist
		return 1
	fi
	return 0
}

function check-entity-exists { check-entity false "$@"; }
function check-entity-exists-not { check-entity true "$@"; }

function check-org-exists { check-entity-exists org org "Organization \`$1\`" $1; }
function check-org-exists-not { check-entity-exists-not org org "Organization \`$1\`" $1; }

function check-user-exists { check-entity-exists user user "User \`$1\`" $1; }
function check-user-exists-not { check-entity-exists-not user user "User \`$1\`" $1; }

function check-user-org-exists { check-entity-exists user user-org "User/Organization \`$1\`" $1; }
function check-user-org-exists-not { check-entity-exists-not user user-org "User/Organization \`$1\`" $1; }

function check-repo-exists { check-entity-exists repo repo "Repository \`$1/$2\`" $1 $2; }
function check-repo-exists-not { check-entity-exists-not repo repo "Repository \`$1/$2\`" $1 $2; }

function check-team-exists { check-entity-exists team team "Team \`$1:$2\`" $1 $2; }
function check-team-exists-not { check-entity-exists-not team team "Team \`$1:$2\`" $1 $2; }

function check-empty {
	if [ -z "$1" ]; then
		return 1
	fi
	return 0
}
function echo-and-exit-code--error-if-empty {
	if [ ! -z "$1" ]; then
		echo "$1"
	fi
	check-empty "$1"
}

function check-message {
	test=`echo "$1" | json-property message`
	if [ -z "$test" ]; then
		return 0
	fi
	return 1
}
function echo-and-exit-code--error-if-message {
	if [ ! -z "$1" ]; then
		echo "$1"
	fi
	check-message "$1"
}

function echo-output-if-error {
	if [ $1 -ne 0 ]; then
		echo "$2"
	fi
	return $1
}

alias echo-if-error='echo-output-if-error $?'

alias return-if-error='
	if [ $? -ne 0 ]; then
		return 0
	fi
	'
alias return-exit-code-if-error='
	check_error=$?
	if [ $check_error -ne 0 ]; then
		return $check_error
	fi
	'

# specialized helpers ----------

function resolve-team-id-and-following-name {
	if is-number $1; then
		id=$1
		name=$2
	elif [ -z $3 ]; then
		echo "The provided \`team-id\` is not a number"
		return 1
	else
		check-org-exists-not $1; return-exit-code-if-error

		sub-cmd-no-debug "get-teams id (resolve-team-id-and-following-name)"
		response=`get-team $1 $2 id`
		sub-cmd-error-check

		id=$response
		name=$3
	fi
	return 0
}

function resolve-user-org-id {
	if is-number $1; then
		echo $1
	else
		check-user-org-exists-not $1; return-exit-code-if-error

		sub-cmd-no-debug "get-user id (resolve-user-org-id)"
		response=`get-user $1 id`
		sub-cmd-error-check

		echo $response
	fi
	return 0
}

function resolve-or-input-password {
	if [ $debug -eq 1 ]; then
		password=PASSWORD
	elif [ -z "$1" ]; then
		read -sp "Password: " password
		echo
	else
		password="$1"
	fi
}

# actions ----------

actions=$actions" create-api-token"
function create-api-token {
	syntax-help 2 "user-name token-name [password]" "$@"

	check-user-exists-not $1; return-exit-code-if-error

	resolve-or-input-password "$3"

	response=`gogs-curl-basic POST "$1:$password" /users/$1/tokens "{\"name\":\"$2\"}"`

	if [ -z "$response" ]; then
		echo Token could NOT be created. Wrong password?
		return 1
	elif is-dev; then
		echo "$response"
	else
		echo "$response" | json-property sha1
	fi
}

actions=$actions" list-api-tokens"
function list-api-tokens {
	syntax-help 1 "user-name [password]" "$@"

	check-user-exists-not $1; return-exit-code-if-error

	resolve-or-input-password "$2"

	response=`gogs-curl-basic GET "$1:$password" /users/$1/tokens`

	check-message "$response"; return-exit-code-if-error

	if is-dev; then
		echo "$response"
	else
		echo "$response" | split-json "}," "{" | per-line "json-properties sha1 name"
	fi
}

actions=$actions" get-api-token-user"
function get-api-token-user {
	syntax-help 0 "[property]" "$@"

	response=`gogs-curl GET /user`

	if [ -z $1 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | json-property "$1"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" -"

actions=$actions" (admin) create-user"
function create-user {
	syntax-help 3 "user-name email password" "$@"

	check-user-exists $1; return-if-error

	output=`gogs-curl POST /admin/users "{\"username\":\"$1\",\"email\":\"$2\",\"password\":\"$3\"}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" get-user"
function get-user {
	syntax-help 1 "user-name [property]" "$@"

	response=`gogs-curl GET /users/$1`

	if [ -z "$response" ]; then
		echo User \`$1\` does NOT exist
		return 1
	elif [ -z $2 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | json-property "$2"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" (admin) delete-user"
function delete-user {
	syntax-help 1 "user-name" "$@"

	check-user-exists-not $1; return-if-error

	output=`gogs-curl DELETE /admin/users/$1`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" -"

actions=$actions" create-own-org"
function create-own-org {
	syntax-help 1 "org-name" "$@"

	check-org-exists $1; return-if-error

	output=`gogs-curl POST /user/orgs "{\"username\":\"$1\"}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" (admin) create-org"
function create-org {
	syntax-help 2 "org-name owner-user-name" "$@"

	check-org-exists $1; return-if-error
	check-user-exists-not $2; return-exit-code-if-error

	output=`gogs-curl POST /admin/users/$2/orgs "{\"username\":\"$1\"}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" get-org"
function get-org {
	syntax-help 1 "org-name [property]" "$@"

	response=`gogs-curl GET /orgs/$1`

	if [ -z "$response" ]; then
		echo Organization \`$1\` does NOT exist
		return 1
	elif [ -z $2 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | json-property "$2"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" -"

actions=$actions" create-own-repo"
function create-own-repo {
	syntax-help 3 "repo-name description private:true/false" "$@"

	check-repo-exists $1 $2; return-if-error

	output=`gogs-curl POST /user/repos "{\"name\":\"$1\",\"description\":\"$2\",\"private\":$3}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" create-org-repo"
function create-org-repo {
	syntax-help 4 "org-name repo-name description private:true/false" "$@"

	check-org-exists-not $1; return-exit-code-if-error
	check-repo-exists $1 $2; return-if-error

	output=`gogs-curl POST /org/$1/repos "{\"name\":\"$2\",\"description\":\"$3\",\"private\":$4}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" (admin) create-repo"
function create-repo {
	syntax-help 4 "user/org-name repo-name description private:true/false" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists $1 $2; return-if-error

	output=`gogs-curl POST /admin/users/$1/repos "{\"name\":\"$2\",\"description\":\"$3\",\"private\":$4}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" create-mirror-repo"
function create-mirror {
	syntax-help 6 "clone-url repo-name (owner-user/org-name | -id) private:true/false mirror:true/false description [user-name password]" "$@"

	owner=`resolve-user-org-id $3`

	request="\"clone_addr\":\"$1\",\"repo_name\":\"$2\",\"uid\":$owner,\"private\":$4,\"mirror\":$5,\"description\":\"$6\""
	if [ ! -z "$7" ]; then
		request="$request,\"auth_username\":\"$7\",\"auth_password\":\"$8\""
	fi

	output=`gogs-curl POST /repos/migrate {"$request"}`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" list-own-repos"
function list-own-repos {
	syntax-help 0 "" "$@"

	response=`gogs-curl GET /user/repos`

	if is-dev; then
		echo "$response"
	else
		echo "$response" | split-json "}}," "{" | per-line "json-property name"
	fi
}

actions=$actions" list-org-repos"
function list-org-repos {
	syntax-help 1 "org-name" "$@"

	check-org-exists-not $1; return-exit-code-if-error

	response=`gogs-curl GET /orgs/$1/repos`

	if is-dev; then
		echo "$response"
	else
		echo "$response" | split-json "}}," "{" | per-line "json-property name"
	fi
}

actions=$actions" list-user-repos"
function list-user-repos {
	syntax-help 1 "user-name" "$@"

	check-user-exists-not $1; return-exit-code-if-error

	response=`gogs-curl GET /users/$1/repos`

	if is-dev; then
		echo "$response"
	else
		echo "$response" | split-json "}}," "{" | per-line "json-property name"
	fi
}

actions=$actions" get-repo"
function get-repo {
	syntax-help 2 "user/org-name repo-name [property]" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error

	response=`gogs-curl GET /repos/$1/$2`

	if [ -z "$response" ]; then
		echo Repository \`$1/$2\` does NOT exist
		return 1
	elif [ -z $3 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | json-property "$3"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" delete-repo"
function delete-repo {
	syntax-help 2 "user/org-name repo-name" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-if-error

	output=`gogs-curl DELETE /repos/$1/$2`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" -"

actions=$actions" add-collaborator"
function add-collaborator {
	syntax-help 3 "user/org-name repo-name user-name [permission:read/write/admin]" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-exit-code-if-error
	check-user-exists-not $3; return-exit-code-if-error

	output=`gogs-curl PUT /repos/$1/$2/collaborators/$3 "{\"permission\":\"$4\"}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" list-collaborators"
function list-collaborators {
	syntax-help 2 "user/org-name repo-name" "$@"

	get-collaborators $1 $2 username
}

actions=$actions" get-collaborators"
function get-collaborators {
	syntax-help 2 "user/org-name repo-name [property]" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-exit-code-if-error

	response=`gogs-curl GET /repos/$1/$2/collaborators`

	if [ -z $3 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | split-json "}," "{" | per-line "json-property $3"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" remove-collaborator"
function remove-collaborator {
	syntax-help 3 "user/org-name repo-name user-name" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-exit-code-if-error
	check-user-exists-not $3; return-if-error

	output=`gogs-curl DELETE /repos/$1/$2/collaborators/$3`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" -"

actions=$actions" (admin) create-team"
function create-team {
	syntax-help 3 "org-name team-name description [permission:read/write/admin]" "$@"

	check-org-exists-not $1; return-exit-code-if-error
	check-team-exists $1 $2; return-if-error

	output=`gogs-curl POST /admin/orgs/$1/teams "{\"name\":\"$2\",\"description\":\"$3\",\"permission\":\"$4\"}"`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" list-teams"
function list-teams {
	syntax-help 1 "org-name" "$@"

	get-teams $1 name
}

actions=$actions" get-teams"
function get-teams {
	syntax-help 1 "org-name [property]" "$@"

	check-org-exists-not $1; return-exit-code-if-error

	response=`gogs-curl GET /orgs/$1/teams`

	if [ -z $2 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | split-json "}," "{" | per-line "json-property $2"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" get-team"
function get-team {
	syntax-help 2 "org-name team-name [property]" "$@"

	sub-cmd-no-debug get-teams
	response=`get-teams $1`
	sub-cmd-error-check

	response=`echo "$response" | split-json "}," "{" | grep "\"name\":\"$2\""`

	if [ -z "$response" ]; then
		echo Team \`$1:$2\` does NOT exist
		return 1
	elif [ -z $3 ] || is-dev; then
		output="$response"
	else
		output=`echo "$response" | json-property $3`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" -"

actions=$actions" (admin) add-team-member"
function add-team-member {
	syntax-help 2 "(org-name team-name | team-id) user-name" "$@"

	resolve-team-id-and-following-name "$@"; return-exit-code-if-error

	check-user-exists-not $name; return-exit-code-if-error

	output=`gogs-curl PUT /admin/teams/$id/members/$name`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" (admin) list-team-members"
function list-team-members {
	syntax-help 1 "org-name team-name | team-id" "$@"

	resolve-team-id-and-following-name "$@" _; return-exit-code-if-error

	get-team-members $1 $2 username
}

actions=$actions" (admin) get-team-members"
function get-team-members {
	syntax-help 1 "(org-name team-name | team-id) [property]" "$@"

	resolve-team-id-and-following-name "$@" _; return-exit-code-if-error

	response=`gogs-curl GET /admin/teams/$id/members`

	if [ "$name" = "_" ] || is-dev; then
		echo "$response"
	else
		echo "$response" | split-json "}," "{" | per-line "json-property $name"
	fi
}

actions=$actions" (admin) remove-team-member"
function remove-team-member {
	syntax-help 2 "(org-name team-name | team-id) user-name" "$@"

	resolve-team-id-and-following-name "$@"; return-exit-code-if-error

	output=`gogs-curl DELETE /admin/teams/$id/members/$name`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" -"

actions=$actions" (admin) add-team-repo"
function add-team-repo {
	syntax-help 2 "(org-name team-name | team-id) repo-name" "$@"

	resolve-team-id-and-following-name "$@"; return-exit-code-if-error

	output=`gogs-curl PUT /admin/teams/$id/repos/$name`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" (admin) remove-team-repo"
function remove-team-repo {
	syntax-help 2 "(org-name team-name | team-id) repo-name" "$@"

	resolve-team-id-and-following-name "$@"; return-exit-code-if-error

	output=`gogs-curl DELETE /admin/teams/$id/repos/$name`

	echo-and-exit-code--error-if-message "$output"
}

actions=$actions" -"

actions=$actions" get-commit"
function get-commit {
	syntax-help 3 "user/org-name repo-name branch/tag/sha [property]" "$@"

	json=`gogs-curl GET /repos/$1/$2/commits/$3`

	if [ -z $4 ] || is-dev; then
		output="$json"
	else
		output=`echo "$json" | json-property "$4"`
	fi

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" get-raw"
function get-raw {
	syntax-help 3 "user/org-name repo-name ref" "$@"

	$output = `gogs-curl GET /repos/$1/$2/raw/$3`

	echo-and-exit-code--error-if-empty "$output"
}

actions=$actions" enable-issues"
function enable-issues {
	syntax-help 3 "user/org-name repo-name enable:true/false" "$@"

	check-user-org-exists-not $1; return-exit-code-if-error
	check-repo-exists-not $1 $2; return-exit-code-if-error

	output=`gogs-curl PATCH /repos/$1/$2/issue-tracker "{\"enable_issues\":$3}"`

	echo-and-exit-code--error-if-message "$output"
}

# cmd interface ----------

function print-help {
	echo
	echo \*\* Gogs command line interface \*\*
	echo
	echo "  "----------
	echo
	for action in $actions; do
		if [ "$action" = "-" ]; then
			echo
		elif [[ "$action" = "("* ]]; then
			info="$action"
		else
			echo -e "  "$action "\033[0;90m$info\033[0m"
			info=""
		fi
	done
	configure do-not-ask-if-not-configured
	echo
	echo "  "----------
	echo
	echo -e "  "Server: `if [ -z "$gogs_server" ]; then echo "\033[0;31m"NOT-CONFIGURED"\033[0m"; fi`$gogs_server
	if [ ! -z "$gogs_server" ]; then echo -en "\033[0;90m"; fi
	echo -n "  "\(Change via environment variable $gogs_server_envvar or $gogs_server_filename\)
	if [ ! -z "$gogs_server" ]; then echo -e "\033[0m"; fi
	echo
	echo -e "  "API token: `if [ -z "$gogs_token" ]; then echo "\033[0;31m"NOT-CONFIGURED"\033[0m"; else echo ${gogs_token:0:5}...; fi`
	if [ ! -z "$gogs_token" ]; then echo -en "\033[0;90m"; fi
	echo    "  "\(Change via environment variable $gogs_token_envvar or $gogs_token_filename[.gpg]\)
	echo -n "  "\(Create one here: `if [ -z "$gogs_server" ]; then echo https://YOUR.GOGS.SERVER; fi`$gogs_server/user/settings/applications\)
	if [ ! -z "$gogs_token" ]; then echo -e "\033[0m"; fi

	if [ ! -z "$gogs_server" ] && [ ! -z "$gogs_token" ]; then
		echo
		echo "  "Authenticated as:
		echo -n "  ... "
		response=`get-api-token-user`
		r_login=`echo "$response" | json-property username`
		r_name=`echo "$response" | json-property full_name`
		r_email=`echo "$response" | json-property email`
		echo -en "\r  $r_login"
		if [ ! -z "$r_name" ]; then echo -n " ($r_name)"; fi
		echo " / $r_email"
	fi
}

debug=0
dev=0
while [ -n "$1" ] && [[ "$1" = "-"* ]] && [ "$1" != "--" ]; do
	case "$1" in
		-d) dev=1; debug=1; echo \# DRY RUN \(doing nothing\) ;;
		-D) dev=1; echo \# DEV RUN ;;
	esac
	shift
done

function run_action {
	configure
	if is-dev; then
		echo -e "# Config:\tURL: $gogs_server"
		echo -e "#\t\tToken: $gogs_token"
		echo \#
	fi
	action=$1
	if is-dev; then
		echo \# Action: $action
	fi
	"$@"
}

if [ $# -gt 0 ]; then
	action=$1
	shift
	for a in $actions; do
		if [ "$a" = "$action" ] && [ "$a" != "-" ]; then
			run_action $action "$@"
			exit $?
		fi
	done
	case $action in
		--help) print-help ;;
		--)
			action=$1
			shift
			run_action $action "$@"
			;;
		*) echo Unrecognized action: \`$action\` ;;
	esac
else
	print-help
fi
